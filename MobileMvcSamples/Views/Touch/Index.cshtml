@{
    ViewBag.Title = "Index";
}


<input id="foo" value="bar"/>


<script>
  window.onload = function () {
    
    var thingy = document.getElementById('foo');
    console.log(thingy, thingy.value);

  }
</script>

<style>
.touch-box {
  border: solid 1px #000;
}

  h2 {
    border-top: solid 2px #000;
    margin-top: 25px;
    padding-top: 10px;
    font-family: sans-serif;
  }

  #touch-display {
    background-color: rgba(200, 200, 200, .9);
    border: solid 1px #000;
    position: fixed;
    right: 0;
    top: 0;
    height: 100%;
    width: 100px;
  }

  #touch-display .mouse-event, #touch-display .touch-event {
    display: none;
  }

  #touch-display ul {
    margin: 0;
    padding: 0;
  }

  #touch-display li {
    font-size: .8em;
    font-weight: bold;
    list-style-type: none;
    margin: 0;
    padding: 0;
  }

  #touch-display div {
    font-weight: normal;
  }

</style>

<h1>Basic Touch Apis</h1>

<p>These are the device and browser combinations tested:</p>

<ul>
  <li>iPad - iOS 6.1/Safari</li>
  <li>iPod - iOS 4.0/Safari</li>
  <li>S3[chr] - Galaxy S3/Chrome</li>
  <li>S3[def] - Galaxy S3/Default browser</li>
  <li>LG - LG Nitro/Android 2.3.5/Default browser</li>
  <li>Nexus[chr] - Galaxy Nexus/Android 4.1.1/Chrome</li>
  <li>Nexus[def] - Galaxy Nexus/Android 4.1.1/Default browser</li>
  <li>L820 - Lumia 820/Windows Phone 8/IE</li>
  <li>L900 - Lumia 900/Windows Phone 7.5/IE</li>
  <li>BB10 - Blackberry 10</li>
  <li>Win8T[chr] - Windows 8/Touch Screen/Chrome</li>
  <li>Win8T[def] - Windows 8/Touch Screen/Internet Explorer</li>
  <li>Win8MT[def] - Windows 8/Metro Touch Screen/Internet Explorer</li>
  <li>Win8M[chr] - Windows 8/Mouse/Chrome</li>
  <li>Win8M[def] - Windows 8/Mouse/Internet Explorer</li>
  <li>Win8MM[def] - Windows 8/Metro Mouse/Internet Explorer</li>
  <li>FireHD - Kindle Fire HD</li>
</ul>

<!-- ============================================================================================= -->
<h2>click</h2>
<p>The click event, the same one we have been using for years for desktop browsers, is handled well universally
  on mobile devices. The only drawback is that on most mobile browsers there is a 300ms delay on the click event.
</p>
<p><strong>Supported By:</strong> iPad, iPod, S3[chr], LG[def], Nexus[chr], Nexus[def], L820, BB10, Win8T[chr], Win8T[def], Win8MT[def], FireHD</p>
<p><strong>Not Supported By:</strong> none</p>
<p><strong>Dunno:</strong> L900, Win8M[chr], Win8M[def], Win8MM[def]</p>

<canvas class="touch-box" id="click" width="250" height="200">&nbsp</canvas>
<script>
  
  (function () {

    var canvas = document.getElementById('click');

    alert('cool');

    if (!canvas.addEventListener)
      alert('no add event listener');

    canvas.addEventListener('click', function (evt) {
      alert('click');
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt));
    });
  })();

</script>


<!-- ============================================================================================= -->
<h2>mousedown, mousemove, mouseup</h2>
<p>Mouse events are emulated, like mousedown, mousemove and mouseup. So these will still fire on mobile devices
  that don't use mice.
</p>
<p><strong>Supported By:</strong> iPad (partial), iPod (partial), LG[def] (partial), Nexus[chr] (partial), Nexus[def] (partial), L820 (partial), BB10,
  Win8T[chr], Win8T[def], Win8MT[def], FireHD
</p>
<p><strong>Not Supported By:</strong> </p>
<p><strong>Dunno:</strong> L900, Win8M[chr], Win8M[def], Win8MM[def]</p>

<canvas class="touch-box" id="mousy" width="250" height="200">&nbsp</canvas>
<script>

  (function () {
    var canvas = document.getElementById('mousy');
    canvas.addEventListener('mousedown', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt), '#0F0');
    });

    canvas.addEventListener('mousemove', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt), '#F00');
    });

    canvas.addEventListener('mouseup', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt), '#00F');
    });

  })();
</script>

<!-- ============================================================================================= -->
<h2>touchstart, touchmove, touchend</h2>
<p>Testing touch* events</p>
<p><strong>Supported By:</strong> iPad, iPod (slow), LG (slow), Win8T[chr], FireHD</p>
<p><strong>Not Supported By:</strong> L820, L900, Win8T[def], Win8MT[def]</p>
<p><strong>Dunno:</strong> S3[chr], S3[def], Nexus*, Win8M[chr], Win8M[def], Win8MM[def]</p>
<canvas class="touch-box" id="touch-events" width="250" height="200">&nbsp</canvas>
<script>

  (function () {

    var i;

    var canvas = document.getElementById('touch-events');
    canvas.addEventListener('touchstart', function (evt) {
      evt.preventDefault();

      //console.log('evt', evt);
      //console.log(evt.touches);

      for (i = 0; i < evt.touches.length; i++) {
        drawSpotOnCanvas(canvas, getPositionFromTouch(evt.touches[i]), '#0F0');
      }
    });

    canvas.addEventListener('touchmove', function (evt) {
      evt.preventDefault();
      //console.log('evt', evt);
      //console.log(evt.touches);

      for (var i = 0; i < evt.touches.length; i++) {
        drawSpotOnCanvas(canvas, getPositionFromTouch(evt.touches[i]), '#F00');
      }
    });

    canvas.addEventListener('touchend', function (evt) {
      evt.preventDefault();

      //console.log('evt', evt);
      //console.log(evt.touches);
      for (var i = 0; i < evt.touches.length; i++) {
        drawSpotOnCanvas(canvas, getPositionFromTouch(evt.touches[i]), '#00F');
      }
    });
  })();


</script>


<!-- ============================================================================================= -->
<h2>gesturestart, gesturechange, gestureend</h2>
<p>Testing gesture* events</p>

<p><strong>Supported By:</strong> </p>
<p><strong>Not Supported By:</strong> </p>

<canvas class="touch-box" id="gesture-events" width="250" height="200">&nbsp</canvas>
<script>
  function gestureEvents() {
    register('#gesture-events', 'gesturestart');
    register('#gesture-events', 'gesturechange');
    register('#gesture-events', 'gestureend');
  }
</script>


<!-- ============================================================================================= -->
<h2>mouseenter, mouseleave</h2>
<p>Testing mouseenter/mouseleave events. This may be IE proprietary.</p>
<p><strong>Supported By:</strong> L820, Win8T[def], Win8MT[def]</p>
<p><strong>Not Supported By:</strong> iPad, iPod, LG, BB10, Win8T[chr], FireHD</p>
<p><strong>Dunno:</strong> S3[chr], S3[def], Nexus[chr], Nexus[def], L900, Win8M[chr], Win8M[def], Win8MM[def]</p>

<canvas class="touch-box" id="mouseenter-events" width="250" height="200">&nbsp</canvas>
<script>
  (function () {
    var canvas = document.getElementById('mouseenter-events');
    canvas.addEventListener('mouseenter', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt), '#0F0');
    });

    canvas.addEventListener('mouseleave', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt), '#00F');
    });
  })();
</script>


<hr />
<div id="touch-log">

</div>

<div id="touch-display">
  <div class="mouse-event">
    <h3>Mouse Event</h3>

    <ul>
      <li>clientX/clientY<div class="client"></div></li>
      <li>layerX/layerY<div class="layer"></div></li>
      <li>offsetX/offsetY <div class="offset"></div></li>
      <li>pageX/pageY<div class="page"></div></li>
      <li>screenX/screenY<div class="screen"></div></li>
      <li>x/y<div class="pos"></div></li>
    </ul>
  </div>
  <div class="touch-event">
    <h3>Touch Events</h3>
  </div>
</div>

<h2>Event Notes</h2>

<p>Mouse Event</p>
<ul>
  <li>clientX/clientY (relative to the window)
    <ul>
      <li>iOS - from edge of actual screen</li>
    </ul>
  </li>
  <li>layerX/layerY
    <ul>
      <li>iOS - matches offset*</li>
    </ul>
  </li>
  <li>offsetX/offsetY (relative to padding box)</li>
  <li>pageX/pageY (relative to the page)</li>
  <li>screenX/screenY (relative to the screen)
    <ul>
      <li>iOS - seems to act more like page*</li>
    </ul>
  </li>
  <li>x/y
    <ul>
      <li>iOS - matches client*</li>
    </ul>
  </li>
</ul>

<h2>TouchEvent</h2>

<ul>
  <li>iOS - layer* and page* are useless</li>
</ul>

<script>



  function register(selector, event, preventDefault) {
    $(selector).on(event, function (evt) {
      console.log('event', evt);

      $('#touch-log').html($('#touch-log').html() + '<br />' + evt.type);

      if (preventDefault)
        evt.preventDefault();

      var target = $(this).get(0);
      var c = target.getContext('2d');
      c.beginPath();
      c.fillStyle = '#F00';
      c.arc(evt.offsetX, evt.offsetY, 30, 0, Math.PI * 2);
      c.fill();

      setTimeout(function () {
        c.clearRect(0, 0, target.width, target.height);
      }, 1000);
    });

  }

  function drawSpotOnCanvas(canvas, pos, color) {

    console.log('drawing', pos);

    var c = canvas.getContext('2d');
    c.beginPath();
    c.fillStyle = color || '#F00';
    c.arc(pos.x, pos.y, 30, 0, Math.PI * 2);
    c.fill();

    setTimeout(function () {
      c.clearRect(0, 0, canvas.width, canvas.height);
    }, 3000);
  }

  function getPositionFromTouch(touch) {
    return {
      y: touch.pageY - touch.target.offsetTop,
      x: touch.pageX - touch.target.offsetLeft
    };
  }

  //Found this nifty function here: http://stackoverflow.com/questions/55677/how-do-i-get-the-coordinates-of-a-mouse-click-on-a-canvas-element
  function relMouseCoords(evt) {

    console.log('evt', evt, Object.prototype.toString.call(evt));

    if (Object.prototype.toString.call(evt) == '[object MouseEvent]') {
      console.log('mouse');
      $('#touch-display .mouse-event').show();

      $('.client').html(evt.clientX + ', ' + evt.clientY);
      $('.layer').html(evt.layerX + ', ' + evt.layerY);
      $('.offset').html(evt.offsetX + ', ' + evt.offsetY);
      $('.page').html(evt.pageX + ', ' + evt.pageY);
      $('.screen').html(evt.screenX + ', ' + evt.screenY);
      $('.pos').html(evt.x + ', ' + evt.y);
    }
    else {
    }

    if (navigator.userAgent.indexOf('Firefox') == -1) {
      return { x: evt.offsetX, y: evt.offsetY };
    }
    else {

      var totalOffsetX = 0;
      var totalOffsetY = 0;
      var canvasX = 0;
      var canvasY = 0;
      var currentElement = this;

      do {
        totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
        totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
      }
      while (currentElement = currentElement.offsetParent)

      canvasX = evt.pageX - totalOffsetX;
      canvasY = evt.pageY - totalOffsetY;

      return { x: canvasX, y: canvasY }
    }
  }

  HTMLCanvasElement.prototype.relMouseCoords = relMouseCoords;
</script>