@{
    ViewBag.Title = "Index";
}

<style>
.touch-box {
  border: solid 1px #000;
  position: relative;
}

  h2 {
    border-top: solid 2px #000;
    margin-top: 25px;
    padding-top: 10px;
    font-family: sans-serif;
  }
</style>

<h1>Basic Touch Apis</h1>


<h2>click</h2>
<p>The click event, the same one we have been using for years for desktop browsers, is handled well universally
  on mobile devices. The only drawback is that on most mobile browsers there is a 300ms delay on the click event.
</p>
<p><strong>Supported By:</strong> iOS</p>
<p><strong>Not Supported By:</strong> none</p>
<canvas class="touch-box" id="click" width="250" height="200">&nbsp</canvas>
<script>
  
  (function () {
    var canvas = document.getElementById('click');
    canvas.addEventListener('click', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt));
    });
  })();

</script>


<h2>mousedown, mousemove, mouseup</h2>
<p>Mouse events are emulated, like mousedown, mousemove and mouseup. So these will still fire on mobile devices
  that don't use mice.
</p>
<p><strong>Supported By:</strong> </p>
<p><strong>Not Supported By:</strong> </p>
<canvas class="touch-box" id="mousy" width="250" height="200">&nbsp</canvas>
<script>

  (function () {
    var canvas = document.getElementById('mousy');
    canvas.addEventListener('mousedown', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt), '#0F0');
    });

    canvas.addEventListener('mousemove', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt), '#F00');
    });

    canvas.addEventListener('mouseup', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt), '#00F');
    });

  })();
</script>

<!--
<p>Testing the onscroll event.</p>
<canvas class="touch-box" id="onscroll" width="250" height="200">&nbsp</canvas>
<script>
  function onscrollEvent() {
    register('#onscroll', 'onscroll', 'scrolling');
  }
</script>
-->

<h2>touchstart, touchmove, touchend</h2>
<p>Testing touch* events</p>
<p><strong>Supported By:</strong> </p>
<p><strong>Not Supported By:</strong> </p>
<canvas class="touch-box" id="touch-events" width="250" height="200">&nbsp</canvas>
<script>

  (function () {
    var canvas = document.getElementById('touch-events');
    canvas.addEventListener('touchstart', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt), '#0F0');
    });

    canvas.addEventListener('touchmove', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt), '#F00');
    });

    canvas.addEventListener('touchend', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt), '#00F');
    });
  })();


</script>


<h2>gesturestart, gesturechange, gestureend</h2>
<p>Testing gesture* events</p>

<p><strong>Supported By:</strong> </p>
<p><strong>Not Supported By:</strong> </p>

<canvas class="touch-box" id="gesture-events" width="250" height="200">&nbsp</canvas>
<script>
  function gestureEvents() {
    register('#gesture-events', 'gesturestart');
    register('#gesture-events', 'gesturechange');
    register('#gesture-events', 'gestureend');
  }
</script>

<h2>mouseenter, mouseleave</h2>
<p>Testing mouseenter/mouseleave events. This may be IE proprietary.</p>
<p><strong>Supported By:</strong> </p>
<p><strong>Not Supported By:</strong> </p>

<canvas class="touch-box" id="mouseenter-events" width="250" height="200">&nbsp</canvas>
<script>
  (function () {
    var canvas = document.getElementById('mouseenter-events');
    canvas.addEventListener('mouseenter', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt), '#0F0');
    });

    canvas.addEventListener('mouseleave', function (evt) {
      evt.preventDefault();
      drawSpotOnCanvas(canvas, canvas.relMouseCoords(evt), '#00F');
    });
  })();
</script>


<hr />
<div id="touch-log">

</div>

<script>

  window.onload = function () {
    gestureEvents();
  }

  function register(selector, event, preventDefault) {
    $(selector).on(event, function (evt) {
      console.log('event', evt);

      $('#touch-log').html($('#touch-log').html() + '<br />' + evt.type);

      if (preventDefault)
        evt.preventDefault();

      var target = $(this).get(0);
      var c = target.getContext('2d');
      c.beginPath();
      c.fillStyle = '#F00';
      c.arc(evt.offsetX, evt.offsetY, 30, 0, Math.PI * 2);
      c.fill();

      setTimeout(function () {
        c.clearRect(0, 0, target.width, target.height);
      }, 1000);
    });

  }

  function drawSpotOnCanvas(canvas, pos, color) {
    var c = canvas.getContext('2d');
    c.beginPath();
    c.fillStyle = color || '#F00';
    c.arc(pos.x, pos.y, 30, 0, Math.PI * 2);
    c.fill();

    setTimeout(function () {
      c.clearRect(0, 0, canvas.width, canvas.height);
    }, 3000);
  }

  //Found this nifty function here: http://stackoverflow.com/questions/55677/how-do-i-get-the-coordinates-of-a-mouse-click-on-a-canvas-element
  function relMouseCoords(event) {
    var totalOffsetX = 0;
    var totalOffsetY = 0;
    var canvasX = 0;
    var canvasY = 0;
    var currentElement = this;

    do {
      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
    }
    while (currentElement = currentElement.offsetParent)

    canvasX = event.pageX - totalOffsetX;
    canvasY = event.pageY - totalOffsetY;

    return { x: canvasX, y: canvasY }
  }

  HTMLCanvasElement.prototype.relMouseCoords = relMouseCoords;
</script>